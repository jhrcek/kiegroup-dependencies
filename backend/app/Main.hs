{-
The app collects all data from deps.tgf files generated by mvn dependency:tree command below
into convenient to browse json format suitable to be viewed by a frontend elm app.

PREREQUISITE: The executable must be placed and run in a folder into which all kiegroup projects have been cloned

USAGE
$ ./droolsjbpm-build-bootstrap/script/mvn-all.sh dependency:tree -DoutputType=tgf -DoutputFile=deps.tgf
$ ./collect-deps
-}

{-# LANGUAGE OverloadedStrings #-}
module Main where

import qualified Control.Foldl as Foldl
import qualified Data.Aeson as Json
import qualified Data.ByteString.Lazy as LBS
import qualified Data.List as List
import qualified Data.Text as Txt
import qualified Data.Text.IO as Txt
import Data.Tree (Tree (Node))
import qualified Filesystem.Path.CurrentOS as OSPath
import Prelude hiding (FilePath)
import qualified TGF
import Turtle
import qualified Turtle.Pattern as Pattern
import Util (filepathToString, filepathToText)
--import qualified TGF.IO

main :: IO ()
main = do
    prepareOutputFolder
    moduleCoordinatesTree <- analyzeModuleStructure
    saveTree moduleCoordinatesTree
    generateIndexHtml


prepareOutputFolder :: IO ()
prepareOutputFolder = do
    alreadyExists <- testdir depTreesDir
    when alreadyExists $ rmtree depTreesDir
    mkdir depTreesDir


findDependencyReports :: Shell FilePath
findDependencyReports = Turtle.find (Pattern.suffix "/deps.tgf") "."


analyzeModuleStructure :: IO (Tree TGF.Coordinate)
analyzeModuleStructure = do
    putStrLn "Analyzing module structure of repos"
    tgfFiles <- fold findDependencyReports Foldl.list
    let dirsTree = tgfFilesToDirectoryTree tgfFiles
    buildModuleCoordinatesTree dirsTree


-- Build tree of simple dir names from list of deps.tgh files.  At each node of the tree there's a deps.tgf file
tgfFilesToDirectoryTree :: [FilePath] -> Tree FilePath
tgfFilesToDirectoryTree tgfFiles =
    buildModuleDirsTree . fmap splitDirectories $ List.sort tgfFiles


buildModuleDirsTree :: [[FilePath]] -> Tree FilePath
buildModuleDirsTree ps
    | null ps   = Node "DUMMY" []
    | otherwise = Node
        (head $ head ps)
        (map buildModuleDirsTree . List.groupBy (\a b -> head a == head b) . List.sort $ filter ((>1).length {-ignore deps.tgf-}) $ map tail ps)


-- Retrieve list of TGF.Coordinates by parsing it out from deps.tgf file at each node of the tree
buildModuleCoordinatesTree :: Tree FilePath -> IO (Tree TGF.Coordinate)
buildModuleCoordinatesTree (Node curDir subdirs) = do
    let tgfFile = curDir </> OSPath.fromText "deps.tgf"
        dummyCoord = TGF.mkCoord "" "" "" ""
    tgfFileExists <- testfile tgfFile
    coordHere <- if tgfFileExists
        then do
            contents <- Txt.readFile $ filepathToString tgfFile
            let eitherCoord = TGF.extractRootCoordinate tgfFile contents
            case eitherCoord of
                Right coord -> return coord
                Left er -> do
                    Txt.putStrLn $ "WARNING: failed to parse TFG data from " <> filepathToText tgfFile <> ". The error was" <> er
                    return dummyCoord
        else do
            Txt.putStrLn $ "WARNING: file " <> filepathToText tgfFile <> " doesn't exist!"
            return dummyCoord
    subdirCoords <- mapM (\(Node rt children) -> buildModuleCoordinatesTree $  Node (curDir </> rt) children) subdirs
    return $ Node coordHere subdirCoords


saveTree :: Tree TGF.Coordinate -> IO ()
saveTree = LBS.writeFile (filepathToString moduleStructureReport) . Json.encode


depTreesDir :: FilePath
depTreesDir = "dependency-trees"


moduleStructureReport :: FilePath
moduleStructureReport = depTreesDir </> "module-structure.json"


indexHtml :: FilePath
indexHtml = depTreesDir </> "index.html"


{-| Genereates index.html which references elm.js to drive the app. -}
generateIndexHtml :: IO ()
generateIndexHtml = do
    putStrLn "Writing index.html"
    Txt.writeFile (filepathToString indexHtml) $ Txt.unlines
        ["<!DOCTYPE HTML>"
        ,"<html>"
        ,"<head>"
        ,"  <title>kiegroup POMs cleanup</title>"
        ,"  <script src=\"elm.js\"></script>"
        ,"</head>"
        ,"<body>"
        ,"  <script type=\"text/javascript\">Elm.Main.fullscreen()</script>"
        ,"</body>"
        ,"</html>"]
