#!/usr/bin/env stack
-- stack --install-ghc runghc
  --package turtle
  --package system-filepath
  --package text

{-
This script will copy all of those deps.tgf files generated by mvn dependency:tree command below
to "dependency-trees" directory and will rename it to the form "<groupId>_<artifactId>_<packaging>.tgf"

PREREQUISITE: this script is placed in a folder into which all kiegroup projects have been cloned

USAGE
$ ./droolsjbpm-build-bootstrap/script/mvn-all.sh dependency:tree -DoutputType=tgf -DoutputFile=deps.tgf
$ ./collectDependencyGraphs.hs
-}

{-# LANGUAGE OverloadedStrings #-}
import qualified Control.Foldl as Foldl
import Data.Text (Text)
import qualified Data.Text as Txt
import qualified Data.Text.IO as Txt
import qualified Filesystem.Path.CurrentOS as OSPath
import Prelude hiding (FilePath)
import Turtle
import qualified Turtle.Pattern as Pattern


main :: IO ()
main = do
    prepareOutputFolder
    putStrLn "Collecting deps.tgf"
    sh $ findDependencyReports >>= copyToTarget
    copiedFilesCount <- fold (ls "dependency-trees") Foldl.length
    putStrLn $ "\nDONE, " <> show copiedFilesCount <> " files copied to 'dependency-trees' directory"


prepareOutputFolder :: IO ()
prepareOutputFolder = do
    alreadyExists <- testdir depTreesDir
    when alreadyExists $ rmtree depTreesDir
    mkdir depTreesDir


depTreesDir :: FilePath
depTreesDir = "dependency-trees"


findDependencyReports :: Shell FilePath
findDependencyReports = pwd >>= Turtle.find (Pattern.suffix "/deps.tgf")


{- We want to move the output file of dependency:analyze, like "drools-wb/drools-wb-webapp/deps.tgf"
   to a single folder where each file will have the name of the form <groupId>_<artifactId>.tgf
-}
toTargetFileName :: FilePath -> IO FilePath
toTargetFileName sourceReport = do
    reportContents <- Txt.readFile . Txt.unpack $ filepathToText sourceReport
    case Txt.lines reportContents of
      (firstLine:_) -> case Txt.words firstLine of
          (_:gav:_) -> case Txt.splitOn ":" gav of
              [_groupId, _artifactId, _packaging, _version] -> return $ depTreesDir </> OSPath.fromText gav <.> "tgf"
              _                                             -> die $ "ERROR: I was expecting the first line of " <> filepathToText sourceReport <> " to contain 'groupId:artifactId:packaging:version' but it was '" <> gav <> "'"
          _ -> die $ "ERROR: I was expecting the first line of " <> filepathToText sourceReport <> " to have two space-separated Strings"
      _ -> die $ "ERROR: File " <> filepathToText sourceReport <> " was empty"


copyToTarget :: FilePath -> Shell ()
copyToTarget sourceReport = liftIO $ do
    targetReport <- liftIO $ toTargetFileName sourceReport
    targetAlreadyExists <- testfile targetReport
    if targetAlreadyExists
        then putStrLn $ "WARNING: " <> show targetReport <> " already exists - NOT overwriting!"
        else putStr "." {-progress indicator -} >> cp sourceReport targetReport


filepathToText :: FilePath -> Text
filepathToText = either (error . show) id . OSPath.toText
